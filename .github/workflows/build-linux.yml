name: Build Linux Packages - Linux Download Manager

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  QT_VERSION: "6.5.0"
  CMAKE_BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - name: "Ubuntu DEB"
            container: "ubuntu:22.04"
            package_type: "deb"
          - name: "CentOS RPM"
            container: "quay.io/centos/centos:stream9"
            package_type: "rpm"
          - name: "AppImage"
            container: "ubuntu:22.04"
            package_type: "appimage"

    container: ${{ matrix.container }}

    steps:
      - name: Install dependencies (Ubuntu/DEB)
        if: matrix.package_type == 'deb' || matrix.package_type == 'appimage'
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            pkg-config \
            libssl-dev \
            libclamav-dev \
            libsqlite3-dev \
            libprotobuf-dev \
            protobuf-compiler \
            libavformat-dev \
            libavcodec-dev \
            libavutil-dev \
            libswscale-dev \
            p7zip-full \
            libcurl4-openssl-dev \
            libgl1-mesa-dev \
            libxkbcommon-dev \
            libxcb-xinerama0-dev \
            libxcb-cursor-dev \
            file \
            desktop-file-utils \
            software-properties-common \
            ca-certificates \
            gnupg \
            lsb-release

      - name: Install Qt6 (Ubuntu)
        if: matrix.package_type == 'deb' || matrix.package_type == 'appimage'
        run: |
          # Add Qt6 PPA for Ubuntu 22.04
          add-apt-repository -y ppa:okirby/qt6-backports
          apt-get update
          apt-get install -y \
            qt6-base-dev \
            qt6-base-dev-tools \
            qt6-tools-dev \
            qt6-tools-dev-tools \
            qt6-l10n-tools \
            qt6-multimedia-dev \
            libqt6sql6-sqlite \
            libqt6opengl6-dev \
            libqt6svg6-dev

      - name: Install Qt6 Charts manually (Ubuntu)
        if: matrix.package_type == 'deb' || matrix.package_type == 'appimage'
        run: |
          # Qt6 Charts might not be available in PPA, so we'll skip it for now
          # and handle it in CMake configuration
          echo "Qt6 Charts will be handled in CMake if available"

      - name: Install additional AppImage dependencies
        if: matrix.package_type == 'appimage'
        run: |
          apt-get install -y \
            fuse \
            libfuse2 \
            zsync
          # Download linuxdeploy and appimagetool
          wget -O /usr/local/bin/linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -O /usr/local/bin/linuxdeploy-plugin-qt https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget -O /usr/local/bin/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x /usr/local/bin/linuxdeploy /usr/local/bin/linuxdeploy-plugin-qt /usr/local/bin/appimagetool

      - name: Install dependencies (CentOS/RPM)
        if: matrix.package_type == 'rpm'
        run: |
          dnf update -y
          dnf groupinstall -y "Development Tools"
          dnf install -y epel-release
          dnf config-manager --set-enabled crb
          dnf install -y \
            cmake \
            git \
            wget \
            curl \
            pkg-config \
            openssl-devel \
            clamav-devel \
            sqlite-devel \
            protobuf-devel \
            protobuf-compiler \
            ffmpeg-devel \
            p7zip-devel \
            libcurl-devel \
            mesa-libGL-devel \
            libxkbcommon-devel \
            xcb-util-cursor-devel \
            rpm-build \
            rpmdevtools

      - name: Install Qt6 (CentOS)
        if: matrix.package_type == 'rpm'
        run: |
          # Install Qt6 from EPEL or compile from source
          dnf install -y \
            qt6-qtbase-devel \
            qt6-qttools-devel \
            qt6-qtmultimedia-devel || true
          # If packages not available, we'll handle Qt6 installation differently
          echo "Qt6 installation attempted, will fallback to manual if needed"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCPACK_GENERATOR=${{ matrix.package_type == 'deb' && 'DEB' || matrix.package_type == 'rpm' && 'RPM' || 'TGZ' }} \
            -DQT_VERSION_MAJOR=6

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Create DEB package
        if: matrix.package_type == 'deb'
        run: |
          cd build
          # Configure CPack for DEB
          cat >> CPackConfig.cmake << EOF
          set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Anna-el Gerard RABENANDRASANA <aerabenandrasana@gmail.com>")
          set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "Linux Download Manager - A modern, feature-rich download manager for Linux")
          set(CPACK_DEBIAN_PACKAGE_DEPENDS "libqt6core6 (>= 6.2), libqt6widgets6 (>= 6.2), libqt6network6 (>= 6.2), libqt6sql6 (>= 6.2), libqt6multimedia6 (>= 6.2), libcurl4, libssl3, libclamav9, libsqlite3-0, libprotobuf23")
          set(CPACK_DEBIAN_PACKAGE_SECTION "utils")
          set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
          set(CPACK_DEBIAN_PACKAGE_HOMEPAGE "https://github.com/aerab243/ldm")
          EOF
          make package

      - name: Create RPM package
        if: matrix.package_type == 'rpm'
        run: |
          cd build
          # Configure CPack for RPM
          cat >> CPackConfig.cmake << EOF
          set(CPACK_RPM_PACKAGE_SUMMARY "Linux Download Manager - Modern download manager for Linux")
          set(CPACK_RPM_PACKAGE_DESCRIPTION "A modern, feature-rich download manager for Linux with Qt6 interface, browser integration, and advanced download management features")
          set(CPACK_RPM_PACKAGE_GROUP "Applications/Internet")
          set(CPACK_RPM_PACKAGE_LICENSE "GPL")
          set(CPACK_RPM_PACKAGE_URL "https://github.com/aerab243/ldm")
          set(CPACK_RPM_PACKAGE_REQUIRES "qt6-qtbase >= 6.2, qt6-qtmultimedia >= 6.2, libcurl, openssl, clamav, sqlite, protobuf")
          EOF
          make package

      - name: Create AppImage
        if: matrix.package_type == 'appimage'
        run: |
          cd build
          make install DESTDIR=AppDir

          # Create desktop file
          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/ldm.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Linux Download Manager
          Comment=Modern download manager for Linux
          Exec=ldm
          Icon=ldm
          Categories=Network;FileTransfer;
          StartupWMClass=ldm
          Keywords=download;manager;internet;transfer;
          EOF

          # Create icon (placeholder)
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          # Create a simple icon if imagemagick is available
          if command -v convert >/dev/null 2>&1; then
            convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/ldm.png
          else
            # Create a simple text-based icon
            echo "LDM Icon placeholder" > AppDir/usr/share/icons/hicolor/256x256/apps/ldm.txt
          fi

          # Set Qt plugin path for AppImage
          export QML_SOURCES_PATHS=/usr/lib/x86_64-linux-gnu/qt6/qml
          export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

          # Create AppImage
          /usr/local/bin/linuxdeploy --appdir AppDir --plugin qt --output appimage

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ldm-${{ matrix.package_type }}-${{ github.sha }}
          path: |
            build/*.deb
            build/*.rpm
            build/*.AppImage
          retention-days: 7

      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.deb
            build/*.rpm
            build/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
