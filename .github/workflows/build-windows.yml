name: Build Windows Package - Linux Download Manager

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  QT_VERSION: "6.5.0"
  CMAKE_BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          modules: "qtmultimedia qtcharts"
          cache: true

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1.3

      - name: Install vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" >> $env:GITHUB_ENV

      - name: Install dependencies with vcpkg
        run: |
          .\vcpkg\vcpkg.exe install --triplet x64-windows `
            curl[openssl] `
            openssl `
            sqlite3 `
            protobuf `
            7zip `
            clamav

      - name: Download FFmpeg
        run: |
          Invoke-WebRequest -Uri "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "."
          $ffmpegDir = Get-ChildItem -Directory -Name "ffmpeg-*"
          echo "FFMPEG_ROOT=$env:GITHUB_WORKSPACE\$ffmpegDir" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="$env:Qt6_DIR" `
            -DFFMPEG_ROOT="$env:FFMPEG_ROOT"

      - name: Build
        run: |
          cd build
          cmake --build . --config ${{ env.CMAKE_BUILD_TYPE }} --parallel

      - name: Install
        run: |
          cd build
          cmake --install . --config ${{ env.CMAKE_BUILD_TYPE }} --prefix install

      - name: Copy Qt dependencies
        run: |
          cd build
          & "$env:Qt6_DIR\bin\windeployqt.exe" --release --qmldir ..\desktop install\bin\ldm.exe

      - name: Copy FFmpeg libraries
        run: |
          Copy-Item "$env:FFMPEG_ROOT\bin\*.dll" -Destination "build\install\bin\"

      - name: Copy vcpkg dependencies
        run: |
          $vcpkgBin = "$env:VCPKG_ROOT\installed\x64-windows\bin"
          if (Test-Path $vcpkgBin) {
            Copy-Item "$vcpkgBin\*.dll" -Destination "build\install\bin\" -ErrorAction SilentlyContinue
          }

      - name: Create installer with NSIS
        run: |
          # Download NSIS
          Invoke-WebRequest -Uri "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.08/nsis-3.08-setup.exe" -OutFile "nsis-setup.exe"
          Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S" -Wait

          # Create NSIS script
          $nsisScript = @"
          !include "MUI2.nsh"

          Name "Linux Download Manager"
          OutFile "LDM-Setup-${{ github.ref_name }}-Windows.exe"
          InstallDir "`$PROGRAMFILES64\Linux Download Manager"
          RequestExecutionLevel admin

          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_LICENSE "LICENSE"
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH

          !insertmacro MUI_UNPAGE_WELCOME
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES

          !insertmacro MUI_LANGUAGE "English"

          Section "Linux Download Manager" SecLDM
            SetOutPath "`$INSTDIR"
            File /r "build\install\*"

            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "DisplayName" "Linux Download Manager"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "Publisher" "Anna-el Gerard RABENANDRASANA"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "URLInfoAbout" "https://github.com/aerab243/ldm"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "HelpLink" "https://github.com/aerab243/ldm/wiki"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "UninstallString" "`$INSTDIR\uninstall.exe"
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "NoModify" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM" "NoRepair" 1

            CreateDirectory "`$SMPROGRAMS\Linux Download Manager"
            CreateShortcut "`$SMPROGRAMS\Linux Download Manager\Linux Download Manager.lnk" "`$INSTDIR\bin\ldm.exe"
            CreateShortcut "`$DESKTOP\Linux Download Manager.lnk" "`$INSTDIR\bin\ldm.exe"

            WriteUninstaller "`$INSTDIR\uninstall.exe"
          SectionEnd

          Section "Uninstall"
            Delete "`$INSTDIR\uninstall.exe"
            RMDir /r "`$INSTDIR"

            Delete "`$SMPROGRAMS\Linux Download Manager\Linux Download Manager.lnk"
            RMDir "`$SMPROGRAMS\Linux Download Manager"
            Delete "`$DESKTOP\Linux Download Manager.lnk"

            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\LDM"
          SectionEnd
          "@

          $nsisScript | Out-File -FilePath "installer.nsi" -Encoding UTF8

          # Build installer
          & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi

      - name: Create portable ZIP
        run: |
          cd build\install
          Compress-Archive -Path * -DestinationPath "..\LDM-Portable-${{ github.ref_name }}-Windows.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ldm-windows-${{ github.sha }}
          path: |
            LDM-Setup-*.exe
            build/LDM-Portable-*.zip
          retention-days: 7

      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            LDM-Setup-*.exe
            build/LDM-Portable-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
