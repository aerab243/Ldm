# Makefile for LDM Complete Application
# Complete IDM-style download manager with real download engine

# Compiler and flags
CXX = g++
CXXFLAGS = -std=c++20 -fPIC -Wall -Wextra -O2
DEFINES = -DQT_NO_DEBUG -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB

# Qt directories - try common locations
QT_INCLUDE_PATHS = /usr/include/qt6 /usr/include/x86_64-linux-gnu/qt6 /opt/qt6/include
QT_LIB_PATHS = /usr/lib/x86_64-linux-gnu /usr/lib64 /opt/qt6/lib

# Find Qt installation
QT_INCLUDE_DIR = $(shell for dir in $(QT_INCLUDE_PATHS); do [ -d "$$dir" ] && echo "$$dir" && break; done)
QT_LIB_DIR = $(shell for dir in $(QT_LIB_PATHS); do [ -f "$$dir/libQt6Core.so" ] && echo "$$dir" && break; done)

# Qt includes
INCLUDES = -I$(QT_INCLUDE_DIR) \
           -I$(QT_INCLUDE_DIR)/QtCore \
           -I$(QT_INCLUDE_DIR)/QtWidgets \
           -I$(QT_INCLUDE_DIR)/QtGui \
           -I$(QT_INCLUDE_DIR)/QtNetwork \
           -I. -Isrc

# Qt libraries
LIBS = -L$(QT_LIB_DIR) \
       -lQt6Core \
       -lQt6Widgets \
       -lQt6Gui \
       -lQt6Network \
       -lcurl \
       -lssl \
       -lcrypto

# Source files
SOURCES = src/main_complete.cpp
MOC_SOURCE = src/main_complete.moc

# Output
TARGET = ldm-complete
TARGET_DEBUG = ldm-complete-debug

# MOC tool
MOC = $(shell which moc-qt6 2>/dev/null || which moc 2>/dev/null || echo "/usr/lib64/qt6/libexec/moc")

.PHONY: all clean debug install help

all: $(TARGET)
	@echo "✓ Build complete: $(TARGET)"

$(TARGET): $(MOC_SOURCE)
	@echo "Building LDM Complete Application..."
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) $(SOURCES) $(LIBS) -o $(TARGET)

$(MOC_SOURCE): $(SOURCES)
	@echo "Generating MOC file..."
	@if [ -x "$(MOC)" ]; then \
		$(MOC) $(SOURCES) -o $(MOC_SOURCE); \
	else \
		echo "MOC not found, trying alternatives..."; \
		if [ -x "/usr/lib64/qt6/libexec/moc" ]; then \
			/usr/lib64/qt6/libexec/moc $(SOURCES) -o $(MOC_SOURCE); \
		elif [ -x "/usr/lib/qt6/libexec/moc" ]; then \
			/usr/lib/qt6/libexec/moc $(SOURCES) -o $(MOC_SOURCE); \
		elif [ -x "/usr/lib/x86_64-linux-gnu/qt6/libexec/moc" ]; then \
			/usr/lib/x86_64-linux-gnu/qt6/libexec/moc $(SOURCES) -o $(MOC_SOURCE); \
		else \
			echo "Warning: MOC not found, creating empty MOC file"; \
			touch $(MOC_SOURCE); \
		fi \
	fi

debug: CXXFLAGS += -g -DDEBUG
debug: DEFINES = -DQT_DEBUG -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB
debug: TARGET = $(TARGET_DEBUG)
debug: $(TARGET_DEBUG)
	@echo "✓ Debug build complete: $(TARGET_DEBUG)"

$(TARGET_DEBUG): $(MOC_SOURCE)
	@echo "Building LDM Complete Application (Debug)..."
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) $(SOURCES) $(LIBS) -o $(TARGET_DEBUG)

install: $(TARGET)
	@echo "Installing LDM Complete..."
	@if [ ! -d "/usr/local/bin" ]; then \
		echo "Creating /usr/local/bin directory..."; \
		sudo mkdir -p /usr/local/bin; \
	fi
	sudo cp $(TARGET) /usr/local/bin/ldm
	sudo chmod +x /usr/local/bin/ldm
	@echo "✓ LDM installed to /usr/local/bin/ldm"
	@echo "You can now run: ldm"

uninstall:
	@echo "Uninstalling LDM..."
	sudo rm -f /usr/local/bin/ldm
	@echo "✓ LDM uninstalled"

run: $(TARGET)
	@echo "Running LDM Complete Application..."
	./$(TARGET)

run-debug: $(TARGET_DEBUG)
	@echo "Running LDM Complete Application (Debug)..."
	./$(TARGET_DEBUG)

test: $(TARGET)
	@echo "Testing LDM Complete Application..."
	@echo "Starting application for 5 seconds..."
	timeout 5s ./$(TARGET) || true
	@echo "✓ Basic test completed"

clean:
	@echo "Cleaning build files..."
	rm -f $(TARGET) $(TARGET_DEBUG) $(MOC_SOURCE)
	@echo "✓ Clean complete"

distclean: clean
	@echo "Deep cleaning..."
	rm -f src/*.moc src/*.o src/*.d
	@echo "✓ Deep clean complete"

check-deps:
	@echo "Checking dependencies..."
	@echo "Qt6 Core: $(shell pkg-config --exists Qt6Core && echo "✓ Found" || echo "✗ Missing")"
	@echo "Qt6 Widgets: $(shell pkg-config --exists Qt6Widgets && echo "✓ Found" || echo "✗ Missing")"
	@echo "Qt6 Network: $(shell pkg-config --exists Qt6Network && echo "✓ Found" || echo "✗ Missing")"
	@echo "libcurl: $(shell ldconfig -p | grep libcurl >/dev/null && echo "✓ Found" || echo "✗ Missing")"
	@echo "OpenSSL: $(shell ldconfig -p | grep libssl >/dev/null && echo "✓ Found" || echo "✗ Missing")"
	@echo "C++ Compiler: $(shell which g++ >/dev/null && echo "✓ Found ($(shell g++ --version | head -1))" || echo "✗ Missing")"
	@echo "MOC Tool: $(shell [ -x "$(MOC)" ] && echo "✓ Found ($(MOC))" || echo "✗ Missing")"

fix-permissions:
	@echo "Fixing file permissions..."
	chmod +x $(TARGET) 2>/dev/null || true
	chmod +x $(TARGET_DEBUG) 2>/dev/null || true
	@echo "✓ Permissions fixed"

package: $(TARGET)
	@echo "Creating package..."
	@mkdir -p ldm-package/bin
	@mkdir -p ldm-package/share/doc/ldm
	@cp $(TARGET) ldm-package/bin/ldm
	@cp ../README.md ldm-package/share/doc/ldm/ 2>/dev/null || echo "README.md not found"
	@cp ../LICENSE ldm-package/share/doc/ldm/ 2>/dev/null || echo "LICENSE not found"
	@echo "#!/bin/bash" > ldm-package/install.sh
	@echo "cp bin/ldm /usr/local/bin/" >> ldm-package/install.sh
	@echo "chmod +x /usr/local/bin/ldm" >> ldm-package/install.sh
	@chmod +x ldm-package/install.sh
	@tar -czf ldm-complete-package.tar.gz ldm-package/
	@rm -rf ldm-package/
	@echo "✓ Package created: ldm-complete-package.tar.gz"

help:
	@echo "LDM Complete Application Makefile"
	@echo "================================="
	@echo ""
	@echo "Targets:"
	@echo "  all         - Build the complete application (default)"
	@echo "  debug       - Build with debug symbols"
	@echo "  clean       - Remove build files"
	@echo "  distclean   - Remove all generated files"
	@echo "  install     - Install to /usr/local/bin/ldm"
	@echo "  uninstall   - Remove from /usr/local/bin"
	@echo "  run         - Build and run the application"
	@echo "  run-debug   - Build and run debug version"
	@echo "  test        - Run basic application test"
	@echo "  check-deps  - Check required dependencies"
	@echo "  package     - Create distribution package"
	@echo "  help        - Show this help message"
	@echo ""
	@echo "Features of LDM Complete:"
	@echo "  • Real download engine with libcurl"
	@echo "  • Multi-threaded downloads"
	@echo "  • Resume/pause functionality"
	@echo "  • IDM-style interface"
	@echo "  • Download scheduling"
	@echo "  • Queue management"
	@echo "  • Link grabber"
	@echo "  • Settings dialog"
	@echo "  • System tray integration"
	@echo "  • Notifications"
	@echo ""
	@echo "Usage Examples:"
	@echo "  make              # Build application"
	@echo "  make run          # Build and run"
	@echo "  make install      # Install system-wide"
	@echo "  make debug run-debug  # Debug build and run"
	@echo ""

# Dependency detection and auto-install (Ubuntu/Debian)
install-deps-ubuntu:
	@echo "Installing dependencies for Ubuntu/Debian..."
	sudo apt update
	sudo apt install -y build-essential qt6-base-dev qt6-tools-dev
	sudo apt install -y libcurl4-openssl-dev libssl-dev
	sudo apt install -y qt6-base-dev-tools
	@echo "✓ Dependencies installed"

# Dependency detection and auto-install (Fedora)
install-deps-fedora:
	@echo "Installing dependencies for Fedora..."
	sudo dnf install -y gcc-c++ make qt6-qtbase-devel qt6-qttools-devel
	sudo dnf install -y libcurl-devel openssl-devel
	@echo "✓ Dependencies installed"

# Dependency detection and auto-install (Arch)
install-deps-arch:
	@echo "Installing dependencies for Arch Linux..."
	sudo pacman -S --noconfirm gcc make qt6-base qt6-tools
	sudo pacman -S --noconfirm curl openssl
	@echo "✓ Dependencies installed"

# Auto-detect distro and install deps
install-deps:
	@if [ -f /etc/debian_version ]; then \
		make install-deps-ubuntu; \
	elif [ -f /etc/fedora-release ]; then \
		make install-deps-fedora; \
	elif [ -f /etc/arch-release ]; then \
		make install-deps-arch; \
	else \
		echo "Unknown distribution. Please install dependencies manually:"; \
		echo "- Qt6 development packages"; \
		echo "- libcurl development packages"; \
		echo "- OpenSSL development packages"; \
		echo "- C++ compiler (g++)"; \
	fi

# Quick setup for new users
setup: install-deps all
	@echo "✓ LDM Complete setup finished!"
	@echo "Run: make run"

# Development helpers
watch:
	@echo "Watching for changes... (Ctrl+C to stop)"
	@while true; do \
		make -q $(TARGET) || make $(TARGET); \
		sleep 2; \
	done

profile: CXXFLAGS += -pg
profile: $(TARGET)
	@echo "✓ Profiling build complete"

sanitize: CXXFLAGS += -fsanitize=address -fsanitize=undefined
sanitize: $(TARGET)
	@echo "✓ Sanitizer build complete"
