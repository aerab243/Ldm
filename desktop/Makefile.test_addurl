# Makefile for AddURL Test Application
# Tests the automatic filename extraction functionality

# Project configuration
PROJECT_NAME = test_addurl
TARGET = $(PROJECT_NAME)
BUILD_DIR = build
SOURCE_DIR = src

# Compiler and tools
CXX = g++
MOC = /usr/lib64/qt6/libexec/moc
RCC = rcc
UIC = uic

# Qt configuration
QT_VERSION = 6
QT_MODULES = Core Widgets Network Sql Concurrent
QT_LIBS = $(shell pkg-config --libs Qt$(QT_VERSION)Core Qt$(QT_VERSION)Widgets Qt$(QT_VERSION)Network Qt$(QT_VERSION)Sql Qt$(QT_VERSION)Concurrent)
QT_CFLAGS = $(shell pkg-config --cflags Qt$(QT_VERSION)Core Qt$(QT_VERSION)Widgets Qt$(QT_VERSION)Network Qt$(QT_VERSION)Sql Qt$(QT_VERSION)Concurrent)

# Additional libraries
LIBS = -lcurl -lssl -lcrypto -lsqlite3

# Compiler flags
CXXFLAGS = -std=c++20 -Wall -Wextra -O2 -fPIC
CPPFLAGS = -DVERSION=\"1.0\" -DQT_NO_DEBUG_OUTPUT
INCLUDES = -I$(SOURCE_DIR) -I$(BUILD_DIR) -I. $(QT_CFLAGS)

# Debug flags (use make DEBUG=1)
ifdef DEBUG
    CXXFLAGS += -g -DDEBUG
    CPPFLAGS += -DQT_DEBUG
else
    CXXFLAGS += -DNDEBUG
endif

# Source files
MAIN_SOURCE = test_addurl.cpp

# Core sources (required for functionality)
CORE_SOURCES = \
    $(SOURCE_DIR)/core/DownloadEngine.cpp \
    $(SOURCE_DIR)/core/DownloadItem.cpp \
    $(SOURCE_DIR)/core/Database.cpp \
    $(SOURCE_DIR)/core/Category.cpp \
    $(SOURCE_DIR)/core/NetworkManager.cpp \
    $(SOURCE_DIR)/core/SegmentManager.cpp \
    $(SOURCE_DIR)/core/SpeedCalculator.cpp \
    $(SOURCE_DIR)/core/Settings.cpp

# UI sources
UI_SOURCES = \
    $(SOURCE_DIR)/ui/AddUrlDialog.cpp

# All sources
SOURCES = $(MAIN_SOURCE) $(CORE_SOURCES) $(UI_SOURCES)

# Object files
OBJECTS = $(SOURCES:.cpp=.o)

# MOC files (for Qt meta-object system)
MOC_HEADERS = \
    $(SOURCE_DIR)/core/DownloadEngine.h \
    $(SOURCE_DIR)/core/DownloadItem.h \
    $(SOURCE_DIR)/core/Database.h \
    $(SOURCE_DIR)/ui/AddUrlDialog.h

MOC_SOURCES = $(MOC_HEADERS:.h=.moc)

# Build directory creation
$(shell mkdir -p $(BUILD_DIR))

# Default target
all: $(TARGET)

# Main target
$(TARGET): $(OBJECTS) $(MOC_SOURCES)
	@echo "üîó Linking $(TARGET)..."
	$(CXX) $(OBJECTS) -o $(TARGET) $(QT_LIBS) $(LIBS)
	@echo "‚úÖ Build completed: $(TARGET)"

# Compile source files
%.o: %.cpp
	@echo "üî® Compiling $<..."
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -c $< -o $@

# Generate MOC files
%.moc: %.h
	@echo "üìù Generating MOC for $<..."
	$(MOC) $(INCLUDES) $< -o $(BUILD_DIR)/$(notdir $@)

# Special rule for main source (contains Q_OBJECT)
test_addurl.o: test_addurl.cpp
	@echo "üî® Compiling main source with MOC..."
	$(MOC) $(INCLUDES) test_addurl.cpp -o $(BUILD_DIR)/test_addurl.moc
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -c test_addurl.cpp -o test_addurl.o

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -f $(OBJECTS) $(TARGET)
	rm -f $(BUILD_DIR)/*.moc
	rm -f *.moc
	@echo "‚úÖ Clean completed"

# Install target
install: $(TARGET)
	@echo "üì¶ Installing $(TARGET)..."
	mkdir -p $(DESTDIR)/usr/local/bin
	cp $(TARGET) $(DESTDIR)/usr/local/bin/
	chmod +x $(DESTDIR)/usr/local/bin/$(TARGET)
	@echo "‚úÖ Installation completed"

# Uninstall target
uninstall:
	@echo "üóëÔ∏è Uninstalling $(TARGET)..."
	rm -f $(DESTDIR)/usr/local/bin/$(TARGET)
	@echo "‚úÖ Uninstall completed"

# Run the test application
run: $(TARGET)
	@echo "üöÄ Running AddURL test application..."
	./$(TARGET)

# Test with specific URL
test-url: $(TARGET)
	@echo "üß™ Testing automatic filename extraction..."
	@echo "Testing URLs:"
	@echo "  - https://releases.ubuntu.com/22.04/ubuntu-22.04.3-desktop-amd64.iso"
	@echo "  - https://download.mozilla.org/pub/firefox/releases/latest/linux-x86_64/en-US/firefox-latest.tar.bz2"
	@echo "  - https://github.com/torvalds/linux/archive/refs/heads/master.zip"
	./$(TARGET)

# Build with debug information
debug:
	$(MAKE) DEBUG=1

# Check dependencies
check-deps:
	@echo "üîç Checking dependencies..."
	@pkg-config --exists Qt$(QT_VERSION)Core && echo "‚úÖ Qt$(QT_VERSION)Core found" || echo "‚ùå Qt$(QT_VERSION)Core not found"
	@pkg-config --exists Qt$(QT_VERSION)Widgets && echo "‚úÖ Qt$(QT_VERSION)Widgets found" || echo "‚ùå Qt$(QT_VERSION)Widgets not found"
	@pkg-config --exists Qt$(QT_VERSION)Network && echo "‚úÖ Qt$(QT_VERSION)Network found" || echo "‚ùå Qt$(QT_VERSION)Network not found"
	@which $(CXX) > /dev/null && echo "‚úÖ $(CXX) found" || echo "‚ùå $(CXX) not found"
	@test -f $(MOC) && echo "‚úÖ $(MOC) found" || echo "‚ùå $(MOC) not found"

# Help target
help:
	@echo "üìñ Available targets:"
	@echo "  all        - Build the test application (default)"
	@echo "  clean      - Remove build artifacts"
	@echo "  run        - Build and run the test application"
	@echo "  test-url   - Run with sample URLs for testing"
	@echo "  debug      - Build with debug information"
	@echo "  install    - Install the application"
	@echo "  uninstall  - Remove the installed application"
	@echo "  check-deps - Check for required dependencies"
	@echo "  help       - Show this help message"

# Mark targets as phony
.PHONY: all clean install uninstall run test-url debug check-deps help

# Automatic dependency generation
-include $(OBJECTS:.o=.d)

%.d: %.cpp
	@$(CXX) $(CFLAGS) $(INCLUDES) -MM $< > $@
