# Makefile for LDM IDM Complete Interface
# Builds the complete IDM-style interface with all functionality

# Project configuration
PROJECT_NAME = ldm-idm-complete
VERSION = 1.0.0
TARGET = $(PROJECT_NAME)
BUILD_DIR = build
SOURCE_DIR = src
RESOURCES_DIR = resources

# Compiler and tools
CXX = g++
MOC = moc
RCC = rcc
UIC = uic

# Qt configuration
QT_VERSION = 6
QT_MODULES = Core Widgets Network Sql Concurrent Multimedia
QT_LIBS = $(shell pkg-config --libs Qt$(QT_VERSION)Core Qt$(QT_VERSION)Widgets Qt$(QT_VERSION)Network Qt$(QT_VERSION)Sql Qt$(QT_VERSION)Concurrent Qt$(QT_VERSION)Multimedia)
QT_CFLAGS = $(shell pkg-config --cflags Qt$(QT_VERSION)Core Qt$(QT_VERSION)Widgets Qt$(QT_VERSION)Network Qt$(QT_VERSION)Sql Qt$(QT_VERSION)Concurrent Qt$(QT_VERSION)Multimedia)

# Additional libraries
LIBS = -lcurl -lavformat -lavcodec -lavutil -lswscale -lssl -lcrypto -lclamav -lsqlite3 -lprotobuf -lz

# Compiler flags
CXXFLAGS = -std=c++20 -Wall -Wextra -O2 -fPIC
CPPFLAGS = -DVERSION=\"$(VERSION)\" -DQT_NO_DEBUG_OUTPUT
INCLUDES = -I$(SOURCE_DIR) -I$(BUILD_DIR) -I. $(QT_CFLAGS)

# Debug flags (use make DEBUG=1)
ifdef DEBUG
    CXXFLAGS += -g -DDEBUG
    CPPFLAGS += -DQT_DEBUG
else
    CXXFLAGS += -DNDEBUG
    CPPFLAGS += -DQT_NO_DEBUG_OUTPUT
endif

# Source files
MAIN_SOURCE = $(SOURCE_DIR)/main_idm_complete.cpp

# Core sources
CORE_SOURCES = \
    $(SOURCE_DIR)/core/DownloadEngine.cpp \
    $(SOURCE_DIR)/core/DownloadItem.cpp \
    $(SOURCE_DIR)/core/Database.cpp \
    $(SOURCE_DIR)/core/Category.cpp \
    $(SOURCE_DIR)/core/DownloadQueue.cpp \
    $(SOURCE_DIR)/core/Scheduler.cpp \
    $(SOURCE_DIR)/core/Settings.cpp \
    $(SOURCE_DIR)/core/SpeedCalculator.cpp \
    $(SOURCE_DIR)/core/NetworkManager.cpp \
    $(SOURCE_DIR)/core/SegmentManager.cpp

# UI sources
UI_SOURCES = \
    $(SOURCE_DIR)/ui/AddUrlDialog.cpp \
    $(SOURCE_DIR)/ui/SettingsDialog.cpp \
    $(SOURCE_DIR)/ui/CategoryManager.cpp \
    $(SOURCE_DIR)/ui/StatisticsWidget.cpp \
    $(SOURCE_DIR)/ui/MediaPreviewWidget.cpp \
    $(SOURCE_DIR)/ui/ProgressWidget.cpp \
    $(SOURCE_DIR)/ui/ThemeManager.cpp

# Integration sources
INTEGRATION_SOURCES = \
    $(SOURCE_DIR)/integrations/BrowserIntegration.cpp \
    $(SOURCE_DIR)/integrations/ClipboardMonitor.cpp \
    $(SOURCE_DIR)/integrations/SystemTray.cpp

# API sources
API_SOURCES = \
    $(SOURCE_DIR)/api/ApiServer.cpp \
    $(SOURCE_DIR)/api/ApiHandler.cpp

# Utility sources
UTILS_SOURCES = \
    $(SOURCE_DIR)/utils/FileUtils.cpp \
    $(SOURCE_DIR)/utils/NetworkUtils.cpp \
    $(SOURCE_DIR)/utils/CryptoUtils.cpp

# All sources
SOURCES = $(MAIN_SOURCE) $(CORE_SOURCES) $(UI_SOURCES) $(INTEGRATION_SOURCES) $(API_SOURCES) $(UTILS_SOURCES)

# Headers that need MOC processing
MOC_HEADERS = \
    $(SOURCE_DIR)/core/DownloadEngine.h \
    $(SOURCE_DIR)/core/DownloadItem.h \
    $(SOURCE_DIR)/core/Database.h \
    $(SOURCE_DIR)/core/Category.h \
    $(SOURCE_DIR)/core/DownloadQueue.h \
    $(SOURCE_DIR)/core/Scheduler.h \
    $(SOURCE_DIR)/core/Settings.h \
    $(SOURCE_DIR)/core/SpeedCalculator.h \
    $(SOURCE_DIR)/core/NetworkManager.h \
    $(SOURCE_DIR)/core/SegmentManager.h \
    $(SOURCE_DIR)/ui/AddUrlDialog.h \
    $(SOURCE_DIR)/ui/SettingsDialog.h \
    $(SOURCE_DIR)/ui/CategoryManager.h \
    $(SOURCE_DIR)/ui/StatisticsWidget.h \
    $(SOURCE_DIR)/ui/MediaPreviewWidget.h \
    $(SOURCE_DIR)/ui/ProgressWidget.h \
    $(SOURCE_DIR)/ui/ThemeManager.h \
    $(SOURCE_DIR)/integrations/BrowserIntegration.h \
    $(SOURCE_DIR)/integrations/ClipboardMonitor.h \
    $(SOURCE_DIR)/integrations/SystemTray.h \
    $(SOURCE_DIR)/api/ApiServer.h \
    $(SOURCE_DIR)/api/ApiHandler.h

# UI files
UI_FILES = \
    $(SOURCE_DIR)/ui/forms/AddUrlDialog.ui \
    $(SOURCE_DIR)/ui/forms/SettingsDialog.ui \
    $(SOURCE_DIR)/ui/forms/CategoryManager.ui \
    $(SOURCE_DIR)/ui/forms/StatisticsWidget.ui

# Resource files
QRC_FILES = \
    $(RESOURCES_DIR)/icons.qrc \
    $(RESOURCES_DIR)/themes.qrc \
    $(RESOURCES_DIR)/translations.qrc

# Generated files
MOC_SOURCES = $(MOC_HEADERS:%.h=$(BUILD_DIR)/moc_%.cpp)
UI_HEADERS = $(UI_FILES:$(SOURCE_DIR)/ui/forms/%.ui=$(BUILD_DIR)/ui_%.h)
QRC_SOURCES = $(QRC_FILES:%.qrc=$(BUILD_DIR)/qrc_%.cpp)

# Object files
OBJECTS = $(SOURCES:$(SOURCE_DIR)/%.cpp=$(BUILD_DIR)/%.o)
MOC_OBJECTS = $(MOC_SOURCES:$(BUILD_DIR)/%.cpp=$(BUILD_DIR)/%.o)
QRC_OBJECTS = $(QRC_SOURCES:$(BUILD_DIR)/%.cpp=$(BUILD_DIR)/%.o)

ALL_OBJECTS = $(OBJECTS) $(MOC_OBJECTS) $(QRC_OBJECTS)

# Installation directories
PREFIX ?= /usr/local
BINDIR = $(PREFIX)/bin
DATADIR = $(PREFIX)/share
ICONDIR = $(DATADIR)/icons/hicolor
APPDIR = $(DATADIR)/applications
MANDIR = $(DATADIR)/man/man1

# Default target
all: $(TARGET)

# Create build directory
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(BUILD_DIR)/core
	@mkdir -p $(BUILD_DIR)/ui
	@mkdir -p $(BUILD_DIR)/integrations
	@mkdir -p $(BUILD_DIR)/api
	@mkdir -p $(BUILD_DIR)/utils

# Generate MOC files
$(BUILD_DIR)/moc_%.cpp: $(SOURCE_DIR)/%.h | $(BUILD_DIR)
	@echo "MOC $<"
	@mkdir -p $(dir $@)
	@$(MOC) $(CPPFLAGS) $< -o $@

# Generate UI headers
$(BUILD_DIR)/ui_%.h: $(SOURCE_DIR)/ui/forms/%.ui | $(BUILD_DIR)
	@echo "UIC $<"
	@$(UIC) $< -o $@

# Generate resource files
$(BUILD_DIR)/qrc_%.cpp: %.qrc | $(BUILD_DIR)
	@echo "RCC $<"
	@$(RCC) $< -o $@

# Compile source files
$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.cpp | $(BUILD_DIR)
	@echo "CXX $<"
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -c $< -o $@

# Compile MOC files
$(BUILD_DIR)/moc_%.o: $(BUILD_DIR)/moc_%.cpp
	@echo "CXX $<"
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -c $< -o $@

# Compile resource files
$(BUILD_DIR)/qrc_%.o: $(BUILD_DIR)/qrc_%.cpp
	@echo "CXX $<"
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -c $< -o $@

# Build main target
$(TARGET): $(MOC_SOURCES) $(UI_HEADERS) $(QRC_SOURCES) $(ALL_OBJECTS)
	@echo "LD $@"
	@$(CXX) $(ALL_OBJECTS) $(QT_LIBS) $(LIBS) -o $@
	@echo "Build complete: $(TARGET)"

# Generate resource files if they don't exist
$(RESOURCES_DIR)/icons.qrc:
	@mkdir -p $(RESOURCES_DIR)
	@echo "Creating icons.qrc..."
	@echo '<!DOCTYPE RCC><RCC version="1.0">' > $@
	@echo '<qresource prefix="/icons">' >> $@
	@echo '    <file>ldm.png</file>' >> $@
	@echo '    <file>add.png</file>' >> $@
	@echo '    <file>resume.png</file>' >> $@
	@echo '    <file>pause.png</file>' >> $@
	@echo '    <file>stop.png</file>' >> $@
	@echo '    <file>stop_all.png</file>' >> $@
	@echo '    <file>delete.png</file>' >> $@
	@echo '    <file>delete_completed.png</file>' >> $@
	@echo '    <file>settings.png</file>' >> $@
	@echo '    <file>scheduler.png</file>' >> $@
	@echo '    <file>start_queue.png</file>' >> $@
	@echo '    <file>stop_queue.png</file>' >> $@
	@echo '    <file>grabber.png</file>' >> $@
	@echo '    <file>share.png</file>' >> $@
	@echo '    <file>folder.png</file>' >> $@
	@echo '    <file>archive.png</file>' >> $@
	@echo '    <file>document.png</file>' >> $@
	@echo '    <file>audio.png</file>' >> $@
	@echo '    <file>video.png</file>' >> $@
	@echo '    <file>image.png</file>' >> $@
	@echo '    <file>executable.png</file>' >> $@
	@echo '    <file>file.png</file>' >> $@
	@echo '    <file>downloading.png</file>' >> $@
	@echo '    <file>completed.png</file>' >> $@
	@echo '    <file>queue.png</file>' >> $@
	@echo '</qresource>' >> $@
	@echo '</RCC>' >> $@

# Create placeholder icons
create-icons: $(RESOURCES_DIR)/icons.qrc
	@echo "Creating placeholder icons..."
	@mkdir -p $(RESOURCES_DIR)
	@python3 -c "
import os
from pathlib import Path

icons_dir = Path('$(RESOURCES_DIR)')
icons_dir.mkdir(exist_ok=True)

# Create simple colored squares as placeholder icons
icons = {
    'ldm.png': '🔻',
    'add.png': '➕',
    'resume.png': '▶️',
    'pause.png': '⏸️',
    'stop.png': '⏹️',
    'stop_all.png': '⏹️',
    'delete.png': '🗑️',
    'delete_completed.png': '🗑️',
    'settings.png': '⚙️',
    'scheduler.png': '📅',
    'start_queue.png': '▶️',
    'stop_queue.png': '⏸️',
    'grabber.png': '🎯',
    'share.png': '📤',
    'folder.png': '📁',
    'archive.png': '📦',
    'document.png': '📄',
    'audio.png': '🎵',
    'video.png': '🎬',
    'image.png': '🖼️',
    'executable.png': '⚙️',
    'file.png': '📄',
    'downloading.png': '⏳',
    'completed.png': '✅',
    'queue.png': '📋'
}

# Create a simple 32x32 PNG for each icon
try:
    from PIL import Image, ImageDraw, ImageFont

    for filename, emoji in icons.items():
        img = Image.new('RGBA', (32, 32), (255, 255, 255, 0))
        draw = ImageDraw.Draw(img)

        # Draw a simple colored rectangle
        color = hash(filename) % (256**3)
        r = (color >> 16) & 0xFF
        g = (color >> 8) & 0xFF
        b = color & 0xFF

        draw.rectangle([2, 2, 30, 30], fill=(r, g, b, 255), outline=(0, 0, 0, 255))

        img.save(icons_dir / filename)

    print(f'Created {len(icons)} placeholder icons')

except ImportError:
    # Fallback: create simple text files
    for filename in icons:
        with open(icons_dir / filename, 'w') as f:
            f.write('PNG placeholder')
    print(f'Created {len(icons)} placeholder icon files')
"

# Development targets
debug: DEBUG=1
debug: clean $(TARGET)

# Clean build files
clean:
	@echo "Cleaning build files..."
	@rm -rf $(BUILD_DIR)
	@rm -f $(TARGET)
	@rm -f $(SOURCE_DIR)/main_idm_complete.moc

# Clean all generated files
distclean: clean
	@echo "Cleaning all generated files..."
	@rm -f $(RESOURCES_DIR)/*.qrc

# Install target
install: $(TARGET)
	@echo "Installing $(TARGET)..."
	@install -d $(DESTDIR)$(BINDIR)
	@install -m 755 $(TARGET) $(DESTDIR)$(BINDIR)/
	@install -d $(DESTDIR)$(APPDIR)
	@echo "[Desktop Entry]" > $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Version=1.0" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Type=Application" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Name=LDM - Like Download Manager" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Comment=Advanced download manager with IDM-style interface" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Icon=ldm" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Exec=$(BINDIR)/$(TARGET)" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Categories=Network;FileTransfer;" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@echo "Keywords=download;manager;internet;" >> $(DESTDIR)$(APPDIR)/ldm.desktop
	@if [ -f $(RESOURCES_DIR)/ldm.png ]; then \
		install -d $(DESTDIR)$(ICONDIR)/48x48/apps; \
		install -m 644 $(RESOURCES_DIR)/ldm.png $(DESTDIR)$(ICONDIR)/48x48/apps/ldm.png; \
	fi
	@echo "Installation complete"

# Uninstall target
uninstall:
	@echo "Uninstalling $(TARGET)..."
	@rm -f $(DESTDIR)$(BINDIR)/$(TARGET)
	@rm -f $(DESTDIR)$(APPDIR)/ldm.desktop
	@rm -f $(DESTDIR)$(ICONDIR)/48x48/apps/ldm.png
	@echo "Uninstallation complete"

# Run target
run: $(TARGET)
	@echo "Running $(TARGET)..."
	@./$(TARGET)

# Test target
test: $(TARGET)
	@echo "Running basic tests..."
	@./$(TARGET) --version || echo "Version test completed"
	@echo "Tests completed"

# Package target (creates a simple tar.gz)
package: clean
	@echo "Creating package..."
	@tar -czf $(PROJECT_NAME)-$(VERSION).tar.gz \
		--exclude='.git*' \
		--exclude='$(BUILD_DIR)' \
		--exclude='*.tar.gz' \
		--exclude='$(TARGET)' \
		--transform 's,^,$(PROJECT_NAME)-$(VERSION)/,' \
		*
	@echo "Package created: $(PROJECT_NAME)-$(VERSION).tar.gz"

# Check dependencies
check-deps:
	@echo "Checking dependencies..."
	@pkg-config --exists Qt$(QT_VERSION)Core Qt$(QT_VERSION)Widgets Qt$(QT_VERSION)Network Qt$(QT_VERSION)Sql Qt$(QT_VERSION)Concurrent Qt$(QT_VERSION)Multimedia || \
		(echo "ERROR: Qt$(QT_VERSION) development packages not found" && exit 1)
	@which $(CXX) > /dev/null || (echo "ERROR: C++ compiler not found" && exit 1)
	@which $(MOC) > /dev/null || (echo "ERROR: Qt MOC not found" && exit 1)
	@which $(RCC) > /dev/null || (echo "ERROR: Qt RCC not found" && exit 1)
	@which $(UIC) > /dev/null || (echo "ERROR: Qt UIC not found" && exit 1)
	@echo "All dependencies found"

# Setup development environment
setup: check-deps create-icons
	@echo "Development environment setup complete"

# Help target
help:
	@echo "LDM IDM Complete Interface Build System"
	@echo "======================================"
	@echo ""
	@echo "Available targets:"
	@echo "  all          - Build the complete application (default)"
	@echo "  debug        - Build with debug information"
	@echo "  clean        - Remove build files"
	@echo "  distclean    - Remove all generated files"
	@echo "  install      - Install the application"
	@echo "  uninstall    - Uninstall the application"
	@echo "  run          - Build and run the application"
	@echo "  test         - Run basic tests"
	@echo "  package      - Create distribution package"
	@echo "  check-deps   - Check build dependencies"
	@echo "  setup        - Setup development environment"
	@echo "  create-icons - Create placeholder icons"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "Variables:"
	@echo "  DEBUG=1      - Enable debug build"
	@echo "  PREFIX=path  - Installation prefix (default: /usr/local)"
	@echo "  CXX=compiler - C++ compiler (default: g++)"
	@echo ""
	@echo "Examples:"
	@echo "  make                    # Build release version"
	@echo "  make DEBUG=1            # Build debug version"
	@echo "  make install PREFIX=/opt/ldm  # Install to /opt/ldm"
	@echo "  make run                # Build and run"

# Declare phony targets
.PHONY: all debug clean distclean install uninstall run test package check-deps setup create-icons help

# Dependencies
$(OBJECTS): | $(BUILD_DIR)
$(MOC_OBJECTS): | $(BUILD_DIR)
$(QRC_OBJECTS): | $(BUILD_DIR)
$(TARGET): | $(BUILD_DIR)

# Include dependency files if they exist
-include $(ALL_OBJECTS:.o=.d)

# Generate dependency files
$(BUILD_DIR)/%.d: $(SOURCE_DIR)/%.cpp | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(INCLUDES) -MM -MT $(@:.d=.o) $< > $@
